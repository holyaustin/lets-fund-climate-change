/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DappFund {
  export type CharityStructStruct = {
    id: BigNumberish;
    owner: AddressLike;
    name: string;
    fullname: string;
    description: string;
    image: string;
    profile: string;
    amount: BigNumberish;
    donations: BigNumberish;
    raised: BigNumberish;
    timestamp: BigNumberish;
    deleted: boolean;
    banned: boolean;
  };

  export type CharityStructStructOutput = [
    id: bigint,
    owner: string,
    name: string,
    fullname: string,
    description: string,
    image: string,
    profile: string,
    amount: bigint,
    donations: bigint,
    raised: bigint,
    timestamp: bigint,
    deleted: boolean,
    banned: boolean
  ] & {
    id: bigint;
    owner: string;
    name: string;
    fullname: string;
    description: string;
    image: string;
    profile: string;
    amount: bigint;
    donations: bigint;
    raised: bigint;
    timestamp: bigint;
    deleted: boolean;
    banned: boolean;
  };

  export type SupportStructStruct = {
    id: BigNumberish;
    cid: BigNumberish;
    fullname: string;
    amount: BigNumberish;
    timestamp: BigNumberish;
    comment: string;
    supporter: AddressLike;
  };

  export type SupportStructStructOutput = [
    id: bigint,
    cid: bigint,
    fullname: string,
    amount: bigint,
    timestamp: bigint,
    comment: string,
    supporter: string
  ] & {
    id: bigint;
    cid: bigint;
    fullname: string;
    amount: bigint;
    timestamp: bigint;
    comment: string;
    supporter: string;
  };
}

export interface DappFundInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "changeTax"
      | "charityExist"
      | "charityTax"
      | "createCharity"
      | "deleteCharity"
      | "donate"
      | "getCharities"
      | "getCharity"
      | "getMyCharities"
      | "getRoleAdmin"
      | "getSupports"
      | "grantRole"
      | "hasRole"
      | "owner"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "toggleBan"
      | "transferOwnership"
      | "updateCharity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "charityExist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "charityTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCharity",
    values: [string, string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteCharity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCharities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCharity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyCharities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupports",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleBan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCharity",
    values: [BigNumberish, string, string, string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "charityExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "charityTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCharity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteCharity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCharities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCharity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMyCharities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupports",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toggleBan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCharity",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DappFund extends BaseContract {
  connect(runner?: ContractRunner | null): DappFund;
  waitForDeployment(): Promise<this>;

  interface: DappFundInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  changeTax: TypedContractMethod<[_taxPct: BigNumberish], [void], "nonpayable">;

  charityExist: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  charityTax: TypedContractMethod<[], [bigint], "view">;

  createCharity: TypedContractMethod<
    [
      name: string,
      fullname: string,
      profile: string,
      description: string,
      image: string,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  deleteCharity: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  donate: TypedContractMethod<
    [id: BigNumberish, fullname: string, comment: string],
    [void],
    "payable"
  >;

  getCharities: TypedContractMethod<
    [],
    [DappFund.CharityStructStructOutput[]],
    "view"
  >;

  getCharity: TypedContractMethod<
    [id: BigNumberish],
    [DappFund.CharityStructStructOutput],
    "view"
  >;

  getMyCharities: TypedContractMethod<
    [],
    [DappFund.CharityStructStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSupports: TypedContractMethod<
    [id: BigNumberish],
    [DappFund.SupportStructStructOutput[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  toggleBan: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCharity: TypedContractMethod<
    [
      id: BigNumberish,
      name: string,
      fullname: string,
      profile: string,
      description: string,
      image: string,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "changeTax"
  ): TypedContractMethod<[_taxPct: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "charityExist"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "charityTax"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createCharity"
  ): TypedContractMethod<
    [
      name: string,
      fullname: string,
      profile: string,
      description: string,
      image: string,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteCharity"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "donate"
  ): TypedContractMethod<
    [id: BigNumberish, fullname: string, comment: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getCharities"
  ): TypedContractMethod<[], [DappFund.CharityStructStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getCharity"
  ): TypedContractMethod<
    [id: BigNumberish],
    [DappFund.CharityStructStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyCharities"
  ): TypedContractMethod<[], [DappFund.CharityStructStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSupports"
  ): TypedContractMethod<
    [id: BigNumberish],
    [DappFund.SupportStructStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "toggleBan"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCharity"
  ): TypedContractMethod<
    [
      id: BigNumberish,
      name: string,
      fullname: string,
      profile: string,
      description: string,
      image: string,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
